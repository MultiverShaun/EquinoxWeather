@inject IRepository _repo

@if (isDataLoaded)
{
	<div class="aqi-main" style="color: @(descriptionColor);">
		<h3 style="color: white; text-align: center;"><i class="fas fa-tree fa-sm"></i> Air Quality Index</h3>
		<h1 class="aqi">@aqi</h1>
		<h2 class="aqi-level">@airQualityLevel</h2>
		<h5 class="aqi-description" style="color: white; font-weight: normal;">@airQualityDescription</h5>

		<div class="container">
			<div class="row">
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.pm2_5</h2>
					<h6 class="pollutant">PM2.5</h6>
				</div>
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.pm10</h2>
					<h6 class="pollutant">PM10</h6>
				</div>
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.sulphur_dioxide</h2>
					<h6 class="pollutant">SO<sub>2</sub></h6>
				</div>
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.nitrogen_dioxide</h2>
					<h6 class="pollutant">NO<sub>2</sub></h6>
				</div>
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.ozone</h2>
					<h6 class="pollutant">O<sub>3</sub></h6>
				</div>
				<div class="aqi-pollutant col-4 col-sm">
					<h2 class="p-value">@AirQuality.current.carbon_monoxide</h2>
					<h6 class="pollutant">CO</h6>
				</div>
			</div>
		</div>

		<h6 style="color: lightgray;">Values measured in μg/m³</h6>
		<a class="more-info" href="https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health#:~:text=health%20service%20delivery.-,Pollutants,-Particulate%20matter%20(PM" target="_blank"><i class="fas fa-arrow-up-right-from-square"></i> More Info</a>

	</div>
	
}
else
{
	<div class="d-flex justify-content-center">
		<div class="spinner-border" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}

@code {
	[Parameter]
	public double Lat { get; set; }
	[Parameter]
	public double Lon { get; set; }
	public AirQualityIndex AirQuality { get; set; } = new();
	private int aqi = 0;
	private string airQualityLevel = "";
	private string airQualityDescription = "";
	private string descriptionColor = "";
	private bool isDataLoaded = false;

	protected override async Task OnParametersSetAsync()
	{
		// Call your method to load the weather data
		await LoadAirQualityData();
	}
	private async Task LoadAirQualityData()
	{
		AirQuality = (await _repo.GetAirQuality(Lat, Lon));
		aqi = AirQuality.current.us_aqi;
		if (aqi <= 50)
		{
			airQualityLevel = "Good";
			airQualityDescription = "Air quality is satisfactory, posing minimal risk.";
			descriptionColor = "#bbfcc0";
		}
		else if (aqi > 50 && aqi <= 100)
		{
			airQualityLevel = "Moderate";
			airQualityDescription = "Acceptable air quality, with slight risk for sensitive individuals.";
			descriptionColor = "#ffe278";
		}
		else if (aqi > 100 && aqi <= 150)
		{
			airQualityLevel = "Unhealthy for Sensitive Groups";
			airQualityDescription = "Sensitive groups may experience health effects.";
			descriptionColor = "#ffcf78";
		}
		else if (aqi > 150 && aqi <= 200)
		{
			airQualityLevel = "Unhealthy";
			airQualityDescription = "Some may experience health effects, particularly sensitive groups.";
			descriptionColor = "#ff9b70";
		}
		else if (aqi > 201 && aqi <= 300)
		{
			airQualityLevel = "Very Unhealthy";
			airQualityDescription = "Increased risk of health effects for everyone.";
			descriptionColor = "#ff9b70";
		}
		else if (aqi > 300)
		{
			airQualityLevel = "Hazardous";
			airQualityDescription = "Conditions are at a health warning level, posing severe risks to everyone.";
			descriptionColor = "#ce8aff";
		}

		isDataLoaded = true;
	}
	protected async override Task OnInitializedAsync()
	{
		await LoadAirQualityData();
	}
}

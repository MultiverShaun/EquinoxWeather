@inject IRepository _repo

<div class="hourly-forecast-card" data-bs-toggle="modal" data-bs-target="#hourModal@(CurrentHour)">
    <h5 class="hour">@(timeDisplay)</h5>

    <img src="@(weatherIcon)" alt="Weather Icon" class="weather-icon" width="48px" height="48px" />
    <div class="precip-chance"><i class="fas fa-umbrella"></i> @(precipChance)%</div>
    <div class="temperature">@(temperature)@(temperatureUnit)</div>
    <!-- <div class="temperature-apparent" style="color: #dddddd;">(@(temperatureApparent)@(temperatureUnit))</div> -->
</div>

<!-- Modal -->
<div class="modal fade" id="hourModal@(CurrentHour)" tabindex="-1" aria-labelledby="hourModal@(CurrentHour)Label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark hour-modal">
            <div class="modal-header">
                <h1 class="modal-title fs-5 hour-modal-title" id="hourModal@(CurrentHour)Label">@(timeDisplay) Weather</h1>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <img src="@(weatherIcon)" alt="Weather Icon" class="weather-icon" width="64px" height="64px" />
                <h1>@(weatherDescription)</h1>
                <div>
                    @(temperature)@(temperatureUnit) <span style="color: #dddddd;">(Feels like @(temperatureApparent)@(temperatureUnit))</span>
                </div>
                
                <div class="precip-chance">
                    <i class="fas fa-umbrella"></i> @(precipChance)%
                    <span class="px-1"></span>
                    <i class="fas fa-droplet"></i> @(Weather.hourly.relative_humidity_2m[CurrentHour])%
                    <span class="px-1"></span>
                    <i class="fas fa-sun"></i> @(Weather.hourly.uv_index[CurrentHour])
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int CurrentHour { get; set; }
    public string timeDisplay = "";

    [Parameter]
    public OpenMeteoResponse? Weather { get; set; }

    private int temperature = 0;
    private int temperatureApparent = 0;
    private string temperatureUnit = "";
    private int precipChance = 0;
    private string weatherIcon = "";
    private string weatherDescription = "";

    protected async override Task OnInitializedAsync()
    {
        temperature = Convert.ToInt32(Weather.hourly.temperature_2m[CurrentHour]);
        temperatureApparent = Convert.ToInt32(Weather.hourly.apparent_temperature[CurrentHour]);
        temperatureUnit = Weather.hourly_units.temperature_2m;
        precipChance = Weather.hourly.precipitation_probability[CurrentHour];

        int isDay = Weather.hourly.is_day[CurrentHour];
        int weatherCode = Weather.hourly.weather_code[CurrentHour];
        int currentHourModulo = CurrentHour % 24;
        if (currentHourModulo == 0)
        {
            timeDisplay = $"12AM";
        }
        if (currentHourModulo == 12)
        {
            timeDisplay = $"12PM";
        }
        else if (currentHourModulo < 12 && currentHourModulo != 0)
        {
            timeDisplay = $"{currentHourModulo}AM";
        }
        else if (currentHourModulo > 12)
        {
            timeDisplay = $"{currentHourModulo-12}PM";
        }

        IWeatherCode? weatherStatus = await _repo.GetWeatherCodeInfo(weatherCode);

        if (isDay == 1)
        {
            weatherIcon = weatherStatus.WeatherIconDay();
        }
        else if (isDay == 0)
        {
            weatherIcon = weatherStatus.WeatherIconNight();
        }

        weatherDescription = weatherStatus.CodeDescription();

    }
}

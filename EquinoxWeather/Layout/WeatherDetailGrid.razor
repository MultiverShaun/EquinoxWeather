@inject IRepository _repo

	<div class="detail-grid-tile hour-forecast-box">
        <_24HourForecastBox Weather="@Weather" CurrentHour="@(timeInHours)" />
	</div>

<div id="detail-grid">
    <div>
        <AdvancedInfoBox LocationTime="@(locationTime)" TimeZone="@(Weather.timezone)" Weather="@Weather" PrecipitationChance="@(precipitationChance)" UvIndex="@(uvIndex)" DewPoint="@dewPoint" Visibility="@visibility" />
    </div>
    
    <div class="detail-grid-tile">
        <_7DayForecastBox Weather="@Weather" />
    </div>

</div>

<a class="detail-grid-tile aqi-box" href="https://www.who.int/news-room/fact-sheets/detail/ambient-(outdoor)-air-quality-and-health" target="_blank">
    <AQIBox Lat="@Lat" Lon="@Lon"/>
</a>

@code {
    [Parameter]
    public OpenMeteoResponse? Weather { get; set; }
    [Parameter]
    public IWeatherCode ?WeatherStatus { get; set; }
    [Parameter]
    public string? WeatherIcon { get; set; }
    [Parameter]
    public double Lat { get; set; }
    [Parameter]
    public double Lon { get; set; }
    private string locationTime = "";
    private int timeInHours = 0;
    private int precipitationChance = 0;
    private int uvIndex = 0;
    private int dewPoint = 0;
    private double visibility = 0.0;

    protected async override Task OnInitializedAsync()
    {
        DateTime apiTime = await _repo.GetTimeZoneInfo(Weather.timezone);
        timeInHours = apiTime.Hour;
        locationTime = apiTime.ToString("hh:mm tt");

        precipitationChance = Weather.hourly.precipitation_probability[timeInHours];
        uvIndex = Convert.ToInt32(Weather.hourly.uv_index[timeInHours]);
        dewPoint = Convert.ToInt32(Weather.hourly.dew_point_2m[timeInHours]);
        visibility = Weather.hourly.visibility[timeInHours]/1000;

    }
}